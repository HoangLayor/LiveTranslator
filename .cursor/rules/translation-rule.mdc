---
description: 
globs: 
alwaysApply: true
---
Project: RealTime-Translator

Technology stack:
- Backend: FastAPI (Python 3.11+)
- Real-time communication: WebSocket
- Audio processing: Speech-to-Text, Text-to-Speech
- Translation: MarianMT, OpenAI APIs, Google Cloud Speech, Whisper, gTTS
- Frontend: HTML/CSS/JavaScript (real-time interaction via WebSocket)

Guidelines:

1. Use FastAPI async endpoints and WebSocket routes for low latency.
2. Organize code into modular services: audio_processing, translation, websocket_handling, api_routes.
3. Use Pydantic models for request/response validation with type hints.
4. Integrate external AI/ML models and APIs with clear interface abstractions and fallback strategies.
5. Ensure thread-safe, async-friendly design especially for audio stream processing.
6. Follow OpenAPI standards; auto-generate docs from FastAPI annotations.
7. Use Python logging with appropriate levels (INFO, WARNING, ERROR) and structured logs for troubleshooting.
8. Implement security measures: input sanitization, WebSocket authentication, rate limiting.
9. Write unit and integration tests using pytest and httpx (or websockets testing tools).
10. Use environment variables or config files to manage API keys and sensitive data.
11. Optimize audio data handling to minimize latency and memory usage.
12. Frontend communication via WebSocket should support reconnect and error handling.
13. Document complex workflows, especially audio streaming and translation pipelines.
14. Code style: PEP 8 compliance, 4-space indentation, meaningful English names.
15. For every API or WebSocket handler, include error handling and clear response schemas.
16. Avoid blocking calls in async functions; use asyncio or thread pools as needed.
17. When suggesting code, include necessary import statements and type annotations.
18. All answers must be equal to ** Vietnamese **, unless otherwise required.
19. Do not arbitrarily edit or change my file in cursor if I ** has not allowed **. Should only give a specific code or suggestion with the explanation.
20. When there are many deployment options, please ** compare and explain advantages/disadvantages ** briefly and clearly.
21. Priority is a simple, effective, easy -to -expand and long -term solution.



